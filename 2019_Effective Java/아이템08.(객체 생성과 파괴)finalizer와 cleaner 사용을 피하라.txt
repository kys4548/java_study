자바는 두 가지 객체 소멸자를 제공한다.
그중 finalizer는 예측할 수 없고, 상황에 따라 위험할 수 있어 일반적으로 불필요하다.
finalizer은 나름의 쓰임새가 몇 가지 있긴 하지만 기본적으로 '쓰지 말아야' 한다.
그래서 자바9에서는 finalizer를 사용 자제(deprecated) API로 지정하고 그 대안으로
cleaner를 소개했다.
cleaner는 finalizer보다는 덜 위험하지만, 여전히 예측할 수 없고, 느리고 일반적으로 불 
필요하다.

C++의 파괴자는 비메모리 자원을 회수하는 용도로 쓰인다.
하지만 자바에서는 try-with-resource와 try-finally를 사용해 해결한다.

finalizer와 cleaner는 즉시 수행된다는 보장이 없다.
객체에 접근할 수 없게 된 후 finalizer나 cleanerrk가 실행되기까지 얼마나 걸릴지 알 수 없다.
즉, finalizer와 cleaner로는 제때 실행되어야 하는 작업은 절대 할 수 없다.
(파일 닫기를 맡기면 중대한 오류를 일으킬 수 있다.)

finalizer와 cleaner를 얼마나 신속히 수행할지는 전적으로 가비지 컬렉터 알고리즘에 달렸으며,
이는 가비지 컬렉터 구현마다 천차만별이다.

자바 언어 명세는 finalizer나 cleaner의 수행 시점뿐 아니라 수행 여부조차 보장하지 않는다.
따라서 프로그램 생애주기와 상관없는, 상태를 영구적으로 수정하는 작업에서는 절대
finalizer나 cleaner에 의존해서는 안된다.
(데이터베이스 같은 공유 자원의 영구 락 해제를 맡기면 위험하다.)

System.gc, Sytem.runFinalization 메서드
finalizer와 cleaner가 실행될 가능성을 높여줄 수는 있으나 보장해주진 않는다.

System.runFinalizersOnExit, Runtime.runFinalizersOnExit 메서드
finalizer와 cleaner가 실행됨을 보장해주지만 심각한 결함때문에 지탄받음

finalizer 동작 중 발생한 예외는 무시되며, 처리할 작업이 남았더라도 그 순간 종료된다.
그나마 cleaner를 사용하는 라이브러리는 자신의 스레드를 통제하기 때문에 이러한 문제는 없다.

finalizer와 cleaner는 심각한 성능 문제도 동반한다.
try-with-resource를 사용하여 생성부터 수거까지 12ns가 걸린 반면
finalizer를 사용하면 550ns가 걸렸다.
안전방 방식에서는 생성부터 파괴까지 66ns가 걸렸다.

finalizer를 사용한 클래스는 finalizer 공격에 노출되어 심각한 보안문제를 일으킬 수도 있다.
생성자나 직렬화 과정에서 예외가 발생하면, 이 생성되다 만 객체에서 악의적인 하위 클래스의
finalizer가 수행될 수 있게 된다.
이 finalizer는 정적 필드에 자신의 참조를 할당하여 가비지 컬렉터가 수집하지 못하게 막을 수 있다.
객체 생성을 막으려면 생성자에서 예외를 던지는 것만으로 충분하지만, finalizer가 있다면 그렇지도 않다.
final 클래스들은 그 누구도 하위 클래스를 만들 수 없으니 이 공격에서 안전하다.
final이 아닌 클래스를 finalizer 공격으로부터 방어하려면 아무일도 하지 않는
finalizer 메서드를 만들고 final로 선언하자.

묘안 
클라이언트에서 인스턴스를 다 쓰고 나면 close 메서드를 호출하면 된다.

너무 깊숙한 내용이라서 이정도에서 마무리 하도록 하겠다.

핵심 정리
cleaner(자바 8까지는 finalizer)는 안전망 역할이나 중요하지 않은 네이티브 자원 회수용으로만
사용하자. 물론 이런 경우라도 불확실성과 성능 저하에 주의해야 한다.
