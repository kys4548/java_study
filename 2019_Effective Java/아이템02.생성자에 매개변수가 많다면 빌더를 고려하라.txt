정적 팩터리와 생성자에는 똑같은 제약이 하나 있다. 선택적 매개변수가 많을 때 적절히 대응하기 
어렵다는 점이다.

프로그래머들은 이럴 때 점층적 생성자 패턴을 즐겨 사용 했다.
필수 매개변수만 받는 생성자부터 선택 매개변수를 전부다 받는 생성자까지 늘려가는 방식.

이 클래스의 인스턴스를 만들려면 원하는 매개변수를 모두 포함한 생성자 중 가장 짧은 것을 골라 
호출하면 된다.

점층적 생성자 패턴을 쓸 수는 있지만, 매개변수 개수가 많아지면 클라이언트 코드를 작성하거나 
읽기 어렵다.
-------------------------------------------------------------------------------------

선택 매개변수가 많을 때 활용할 수 있는 두번째 대안인 자바빈즈(JavaBeans pattern)패턴
매개변수가 없는 생성자로 객체를 만든 후, setter 메서드들을 호출해 원하는 매개변수 값 설정.

매개변수들은 (기본값이 있다면) 기본값으로 초기화된다.
코드가 길어지긴 하지만 인스턴스를 만들기 쉽고, 그 결과 더 읽기 쉬운 코드가 되었다.

단점
객체 하나를 만들려면 메서드를 여러개 호출하여야 하고, 객체가 완전히 생성되기 전까지는
일관성(consistency)이 무너진 상태에 놓이게 된다.
(점층적 생성자 패턴에서는 생성자에서만 확인하면 일관성이 유지된다.)
때문에 자바빈즈 패턴에서는 클래스를 불변으로 만들수 없으며 스레드 안정성을 얻으려면
프로그래머가 추가 작업을 해줘야만 한다.

이러한 단점을 완화하고자 생성이 끝난 객체를 수동으로 '얼리고' 얼리기 전에는 사용할 수
없도록 하기도 한다.
하지만 다루기 어렵고 쓴다 하더라도 객체 사용 전에 프로그래머가 freeze메서드를 확실하게 
호출해줬는지를 컴파일러가 보증할 방법이 없어 런타임 오류에 취약하다.
-----------------------------------------------------------------------------

점층적 생성자 패턴의 안정성과 자바빈즈 패턴의 가독성을 겸비한 빌드 패턴(builder pattern)이
세번째 방안이다.

클라이언트는 필요한 객체를 직접 만드는 대신, 필수 매개변수만으로 생성자(혹은 정적 팩터리)를 
호출해 빌더 객체를 얻는다.

public class A {
	private final int a;
	private final int b;
	private final int c;
	private final int d;
	private final int e;
	private final int f;
	
	public static class Builder {
		//필수 매개변수
		private final int a;
		private final int b;

		// 선택 매개변수 -기본값 초기화 
		private final int c = 0;
		private final int d = 0;
		private final int e = 0;
		private final int f = 0;

		public Builder(int a, int b) {
			this.a = a; // 만약 파라미터에 a라는 매개변수가 있다면 구별하기위해 this 사용
			this.b = b;
		}

		public Builder c(int c){
			this.c = c;
			return this;
		}

		public Builder d(int d){
			this.d = d;
			return this;
		}

		public Builder e(int e){
			this.e = e;
			return this;
		}

		public Builder f(int f){
			this.f = f;
			return this;
		}

		public A build() {
			return new A(this);
		}
	}

	public A(Builder builder) {
		a = builder.a; 
		b = builder.b;
		c = builder.c;
		d = builder.d;
		e = builder.e;
		f = builder.f;
	}
}

사용 예시
A temp = new A.Builder(1,2).c(3).d(4).build();
위의 클래스는 불변이며, 모든 매개변수의 기본값들을 한곳에 모아뒀다.
빌더의 세터 메서드들은 빌더 자신을 반환하기 때문에 연쇄적으로 호출할 수 있다.

------------------------------------------------------------------------
빌드 패턴은 계층적으로 설계된 클래스와 함께 쓰기 좋다.
라고 하는데 이부분은 아직 이해하기가 조금 어려워 패스하겠다.

핵심정리
생성자나 정적 팩터리가 처리해야할 매개변수가 많다면 빌더 패턴을 선택하는 게 더 낫다.
매개변수 중 다수가 필수가 아니거나 같은 타입이면 특히 더 그렇다.
빌더는 점층적 생성자보다 클라이언트 코드를 읽고 쓰기가 훨씬 간결하고, 자바빈즈보다 훨씬 안전하다.
