종종 static 메서드와 static 필드만을 담은 클래스가 만들고 싶을 때가 있을 것이다.
객체 지향적으로 사고하지 않는 이들이 종종 남용하는 방식이기에 그리 곱게 보이지는 않지만 나름 쓰임새가 있다.
예를들어 java.lang.Math와 java.util.Arrays처럼 기본 타입 값이나 배열 관련 메서드들을 모아놓을 수 있다.

이런 클래스들은 인스턴스로 만들어 쓰려고 설계한 것이 아니다.
하지만 생성자를 명시하지 않으면 컴파일러가 자동으로 기본 생성자를 만들어준다.

추상 클래스로 만드는 것으로는 인스턴스화를 막을 수 없다.
하위 클래스를 만들어 인스턴스를 하면 그만이다.
이를 본 사용자는 상속해서 쓰라는 뜻으로 오해할 수 있으니 오히려 더 큰문제이다.

해결책 : private 생성자를 추가하면 클래스의 인스턴스화를 막을 수 있다.
public class A {
	//기본 생성자가 만들어지는 것을 막는다. ( 인스턴스화 방지용 )
	private A() {
		throw new AssertionError();
	}
}

명시적 생성자가 private이니 클래스 바깥에서는 접근할 수 없다.
꼭 AssertionError를 던질 필요는 없지만, 클래스 안에서 실수라도 생성자를 호출하지 않도록 해준다.

이 방식은 상속을 불가능하게 하는 효과도 있다.
모든 생성자는 명시적이든 묵시적이든 상위 클래스의 생성자를 호출하게 되는데, 이를 private으로
선언했으니 하위 클래스가 상위 클래스의 생성자에 접근할 길이 막혀버린다.
