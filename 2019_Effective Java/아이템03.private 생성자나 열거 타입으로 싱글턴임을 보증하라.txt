싱글턴이란 인스턴스를 오직 하나만 생성할 수 있는 클래스를 말한다.
싱글턴의 전형적인 예로는 함수와 같은 무상태(stateless) 객체나 설계상 유일해야 하는 
시스템 컴포넌트를 들 수 있다.

그런데 클래스를 싱글턴으로 만들면 이를 사용하는 클라이언트를 테스트하기가 어려워질 수 있다.
타입을 인터페이스로 정의한 다음 그 인터페이스를 구현해서 만든 싱글턴이 아니라면 싱글턴 
인스턴스를 가짜(mock) 구현으로 대체할 수 없기 때문이다.

싱글턴을 만드는 방식은 보통 둘 중 하나다.
두방식 모두 생성자는 private으로 감춰두고, 유일한 인스턴스에 접근할 수 있는 수단으로 
public static 멤버를 하나 마련해둔다.

1. public static final 필드 방식의 싱글턴
public class Elvis {
	public static final Elvis INSTANCE = new Elvis();
	private Elvis() { ... };
}
private 생성자는 public static final 필드인 Elvis.INSTANCE를 초기화 할때 딱 한번만 호출된다.
public이나 protected 생성자가 없으므로 Elvis 클래스가 초기화될 때 만들어진 인스턴스가 
전체 시스템에서 하나뿐임이 보장된다.
예외는 단 한가지, 권한이 있는 클라이언트는 리플렉션 API를 사용해 private 생성자를 호출할 수있다.
이러한 공격을 방어하려면 생성자를 수정하여 두 번째 객체가 생성되려고 할 때 예외를 던지게 하면 된다.

2.정적 팩터리 방식의 싱글턴 
public class Elvis {
	public static final Elvis INSTANCE = new Elvis();
	private Elvis() { ... };
	public static Elvis getInstance() { return INSTANCE; }
}

리플렉션을 통한 예외는 똑같이 적용 -? final을 빼고 getInstance에서 구문 나눠서하면 안되나

첫번째의 장점 : 해당 클래스가 싱글턴임이 명백하게 드러남, 간결함
두번째의 장점 : API를 바꾸지 않고도 싱글턴이 아니게 변경 가능.
			   정적 팩터리를 제네릭 싱글턴 팩터리로 만들 수 있다.
			   정적 팩터리의 메서드 참조를 공급자(Supplier)로 사용할 수 있다.
공통적인 단점 : 직렬화된 인스턴스를 역직렬화할 때마다 새로운 인스턴스 만들어진다.
			   (자세히 모르겠으니 생략하겠다.)

3.열거 타입 방식의 싱글턴 - 바람직한 방법
public enum Elvis{
	INSTANCE;
}
public 필드 방식과 비슷하지만, 더 간결하고, 추가 노력 없이 직렬화 할 수 있고, 심지어 
아주 복잡한 직렬화 상황이나 리플렉션 공격에서도 제2의 인스턴스가 생기는 일을 완벽히 막아준다.
대부분 상황에서는 원소가 하나뿐인 열거 타입이 싱글턴을 만드는 가장 좋은 방법이다.
단, 만드려는 싱글턴이 Enum 외의 클래스를 상속해야 한다면 이 방법은 사용할 수 없다.
(열거 타입이 다른 인터페이스를 구현하도록 선언할 수 있다.)