C, C++ 처럼 메모리를 직접 관리해야 하는 언어를 쓰다가 자바처럼 가비지 컬렉터를 갖춘 언어로
넘어오면 프로그래머의 삶이 훨씬 평안해진다. 다 쓴 객체를 알아서 회수해가니 말이다.
그래서 자칫 메모리 관리에 더 이상 신경 쓰지 않아도 된다고 오해할 수 있는데, 절대 사실이 아니다.


--메모리 누수는 어디서 일어나는가
public class Stack {
	private Object[] elements;
	private int size = 0;
	private static final int DEFAULT_INITIAL_CAPACITY = 16;

	public Stack() {
		elements = new Object[DEFAULT_INITIAL_CAPACITY];
	}

	public void push(Object e) {
		ensureCapacity();
		elements[size++] = e;
	}

	public Object pop() {
		if(size == 0)
			throw new EmptyStackException();
		return elements[--size];
	}

	private void ensureCapacity() {
		if(elements.length == size)
			elements = Arrays.copyOf(elements, 2*size +1);
	}
}
이 코드에서는 스택이 커졌다가 줄어들었을 때 스택에서 꺼내진 객체들을 가비지 컬렉터가 
회수하지 않는다.
프로그램에서 그 객체들을 더 이상 사용하지 않더라도 말이다.
이 스택이 그 객체들의 다 쓴 참조(obsolete reference)를 여전히 가지고 있기 때문이다.
여기서 다 쓴 참조란 문자 그대로 앞으로 다시 쓰지 않을 참조를 뜻한다.
앞의 코드에서는 elements 배열의 '활성 영역'밖의 참조들이 모두 여기에 해당한다.
활성 영역은 인덱스가 size보다 작은 원소들로 구성된다.

해법은 간단하다. 해당 참조를 다 썼을 때 null처리를 하면 된다.

public Object pop() {
	if(size == 0)
		throw new EmptyStackException();
	Object result = elemets[--size];
	elemets[size] = null;
	return result;
}
다 쓴 참조를 null 처리하면 다른 이점도 따라온다.
만약 null 처리한 참조를 실수로 사용하려 하면 프로그램은 즉시 NullPointerException을
던지며 종료 된다.

---------------------------------------------------------------------------
이 문제로 크게 데인 적이 있는 프로그래머는 모든 객체를 다 쓰자마자 일일이 null 처리하는데
혈안이 되기도 한다.
하지만 그럴 필요도 없고 바람직하지도 않다. 프로그램을 필요 이상으로 지저분하게 만들 뿐이다.

객체 참조를 null 처리하는 일은 예외적인 경우여야 한다.
stack 클래스는 왜 메모리 누수에 취약한 걸까?
바로 스택이 자기 메모리를 직접 관리하기 때문이다.
이 스택은 객체 자체가 아니라 객체 잠초를 담는 elements 배열로 저장소 풀을 만들어
원소들을 관리한다.

일반적으로 자기 메모리를 직접 관리하는 클래스라면 프로그래머는 항상 메모리 누수에
주의하여야 한다.

캐시 역시 메모리 누수를 일으키는 주범이다.
이 부분은 아직은 자세히 이해하지말자. 어렵다.

핵심정리
메모리 누수는 겉으로 잘 드러나지 않아 시스템에 수년간 잠복하는 사례도 있다.
이런 누수는 철저한 코드 리뷰나 힙 프로파일러 같은 디버깅 도구를 동원해야만 발견되기도 한다.
그래서 이런 종류의 문제는 예방법을 익혀두는 것이 매우 중요하다.
