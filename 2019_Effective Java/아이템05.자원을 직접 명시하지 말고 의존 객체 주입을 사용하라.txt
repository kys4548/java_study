1.static 유틸리티를 잘못 사용한 예- 유연하지 않고 테스트하기 어렵다.
public class A {
	private static final B b = ...;

	private A() {} //객체 생성 방지
}

2.싱글턴을 잘못 사용한 예- 유연하지 않고 테스트하기 어려다.
public class A {
	private final B b = ...;
	private A() {} 
	public static A INSTANCE = new A();

}
두 방식 모두 하나의 B를 사용한다고 가정한다는 점에서 그리 휼륭해 보이지는 않는다.
A가 여러 B객체를 사용할 수 있도록 만들어보자.
간단히 B 필드에서 final 한정자를 제거하고 다른 사전으로 교체하는 메서드를 추가할 수 있지만,
아쉽게도 이 방식은 어색하고 오류를 내기 쉬우며 멀티스레드 환경에서는 쓸 수 없다.
사용하는 자원에 따라 동작이 달라지는 클래스에는 정적 유틸리티 클래스나 싱글턴 방식이 적합하지 않다.

대신 클래스 A가 여러 자원 인스턴스를 지원해야 하며, 클라이언트가 원하는 B를 사용해야 한다.
-- 인스턴스를 생성할 때 생성자에 필요한 자원을 넘겨주는 방식 사용
public class A {
	private final B b;

	public A(B b){
		this b = Object.requireNonNull(b);
	}
} 
이는 의존 객체 주입의 한 형태로, 생성할 떄 의존성 객체만 주입해주면 된다.

의존 객체 주입이 유연성과 테스트 용이성을 개선해주긴 하지만, 의존성이 수천개나 되는 큰 프로젝트에서는 코드를 어지럽게 만들기도 한다.
스프링(Spring)같은 의존 객체 주입 프레임워크를 사용하면 이런 어질러짐을 해소할 수 있다.

핵심정리 
클래스가 내부적으로 하나 이상의 자원에 의존하고, 그 자원이 클래스 동작에 영향을 준다면 싱글턴과 
정적 유틸리티 클래스는 사용하지 않는 것이 좋다.
이 자원들을 클래스가 직접 만들게 해서도 안된다.
대신 필요한 자원을(혹은 그 자원을 만들어주는 팩터리를) 생성자에 (혹은 정적 팩터리나 빌더에) 넘겨주자.
의존 객체 주입이라 하는 이 기법은 클래스의 유연성, 재상용성, 테스트 용이성을 기막히게 개션해준다.
